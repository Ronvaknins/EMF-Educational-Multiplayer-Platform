function test(){

//getRowsByValues('qa-db','1');

//deleteFromDB('8');

//deleteFromConfig('laddersRops-config1','5');

//addQuestion_qaDB([4,5,6,7,6]);

//addQuestion_config('laddersRops-config1',[3,'l3',4,5,6]);

//getDataFromsheet('test-3');

// addConfig('york');

//getConfigsName();

//addGame("a,b,c,d,e");

//getAllQuestionsDB();
//ddQuestion_qaDB('Q5,n,s,d,f');
// saveAll('laddersRops-config1',"4;level_1,order_1,weight_1,reused_1,path_1,skill_1;Qx;A4_0,Ax_1,Ax_2,Ax_3;2;type_1;F1,F2,F3,F3");
//getDefaultConfig('22087','S&L');
setDefaultConfig('22088;S&L;ladders-config1');
}

function doGet(req){
  var p1 = req.parameter.param1;
  var p2 = req.parameter.param2;
  var p3 = req.parameter.param3;
  switch (p1)  {
        case "getRowsByValues":
            return ContentService.createTextOutput(JSON.stringify(getRowsByValues('qa-db',p2))).setMimeType(ContentService.MimeType. JSON);
        case "getDataFromsheet":
            return ContentService.createTextOutput(JSON.stringify(getDataFromsheet(p2))).setMimeType(ContentService.MimeType. JSON);
            break;
        case "getConfigsName":
            return ContentService.createTextOutput(JSON.stringify(getConfigsName())).setMimeType(ContentService.MimeType. JSON);
            break;
        case "deleteFromDB":
            return ContentService.createTextOutput(JSON.stringify(deleteFromDB(p2))).setMimeType(ContentService.MimeType. JSON);
            break;
        case "deleteFromConfig":
            return ContentService.createTextOutput(JSON.stringify(deleteFromConfig(p2,p3))).setMimeType(ContentService.MimeType. JSON);
            break;
          case "addQuestion_qaDB":
            return ContentService.createTextOutput(JSON.stringify(addQuestion_qaDB(p2))).setMimeType(ContentService.MimeType. JSON);
            break;
          case "addQuestion_config":
            return ContentService.createTextOutput(JSON.stringify(addQuestion_config(p2,p3))).setMimeType(ContentService.MimeType. JSON);
            break;
          case "addConfig":
            return ContentService.createTextOutput(JSON.stringify(addConfig(p2))).setMimeType(ContentService.MimeType. JSON);
            break;
          case "addGame":
            return ContentService.createTextOutput(JSON.stringify(addGame(p2))).setMimeType(ContentService.MimeType. JSON);
            break;
          case "getAllQuestionsDB":
            return ContentService.createTextOutput(JSON.stringify(getAllQuestionsDB())).setMimeType(ContentService.MimeType. JSON);
            break;
        case "saveAll":
            return ContentService.createTextOutput(JSON.stringify(saveAll(p2,p3))).setMimeType(ContentService.MimeType. JSON);
            break;
        case "getDefaultConfig":
            return ContentService.createTextOutput(JSON.stringify(getDefaultConfig(p2,p3))).setMimeType(ContentService.MimeType. JSON);
            break;
        case "setDefaultConfig":
            return ContentService.createTextOutput(JSON.stringify(setDefaultConfig(p2))).setMimeType(ContentService.MimeType. JSON);
            break;
        default:
            return ContentService.createTextOutput(JSON.stringify("ERROR!"));
            break;
    }

}

function getRowsByValues(sheet_name,qvalue){
  ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheet_name);
  qid_s = ss.getRange(2,1,ss.getLastRow(),1); //searching only in the first column qid column
  var textFinder = qid_s.createTextFinder(qvalue);
  //console.log(ss.getRange(1,1,1,ss.getLastColumn()).getValues()[0]);
  var results = [];
  var col_names = ss.getRange(1,1,1,ss.getLastColumn()).getValues()[0];
  listRange = textFinder.matchEntireCell(true).findAll().map((r) => {

    var row = ss.getSheetValues(r.getRow(),1,1,ss.getLastColumn())[0];
    const map_res = new Map();
    col_names.map((val,index) => {
        map_res.set(val,row[index]);
      
      });
    results.push(Object.fromEntries(map_res));
   
 
   }); 
  console.log(results);
  return results;
}
function deleteFromDB(value)
{
  var num_sheets = SpreadsheetApp.getActiveSpreadsheet().getNumSheets();
  var sheets = SpreadsheetApp.getActiveSpreadsheet().getSheets();
  for (i=0;i<num_sheets;i++)
  {
    
    if(sheets[i].getSheetName() !== 'qid-gen')
    {
        console.log(sheets[i].getSheetName());
        qid_s = sheets[i].getRange(2,1,sheets[i].getLastRow(),1);
        var textFinder = qid_s.createTextFinder(value);
        listRange = textFinder.matchEntireCell(true).findAll().map((r) => r.getRow());
        //reversed because when row get removed the index change
        listRange.reverse().forEach(function(row) {
          // console.log(row);
          sheets[i].deleteRow(row);});
    }
  
  }
  return true;
}

function deleteFromConfig(config_name,value)
{
  ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(config_name);
  qid_s = ss.getRange(2,1,ss.getLastRow(),1);
  var textFinder = qid_s.createTextFinder(value);
  var found = textFinder.matchEntireCell(true).findNext();
  if(found == null)
  {
    return false;
  }
  ss.deleteRow(found.getRow());
  return true

}

function addQuestion_qaDB(data_array)
{

  data_array = data_array.split(';');
  var question = data_array[0];
  var answers = data_array[1].split(',');
  var correct_answer= data_array[2].split(',');
  var type = data_array[3];
  var fdbk = data_array[4].split(',');

  ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('qa-db');
  var qgs = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('qid-gen').getRange(1,1,1,1);
  qid=qgs.getValues()[0][0];
  qid++;
  qgs.setValue(qid);
  for(i=0;i<answers.length;i++)
  {
    if(i==0)
    {
        ss.appendRow([qid,question,answers[i],correct_answer[i],type,fdbk[i]]);

    }
    else
    {
      ss.appendRow([qid,'',answers[i],correct_answer[i],type,fdbk[i]]);
    }

  }
  return qid;
}

function addQuestion_config(config_name,data_array){
  data_array = data_array.split(',');
  qass = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('qa-db');
  ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(config_name);
  qid_s_qa = qass.getRange(2,1,qass.getLastRow(),1);
  qid_s_config = ss.getRange(2,1,ss.getLastRow(),1);
  var textFinder_qa = qid_s_qa.createTextFinder(data_array[0]);
  var textFinder_config = qid_s_config.createTextFinder(data_array[0]);
  if(textFinder_qa.matchEntireCell(true).findNext() != null)
  {
    if(textFinder_config.matchEntireCell(true).findNext() == null){
        ss.appendRow(data_array);
        return true;
    }
    else{
      return ("This Question is already inside "+config_name+"config file");
    }

  }
  else
  {
    return ("NO SUCH QUESTION IN THE Q-A DB");
  }
}
function addConfig(sname)
{
var currentActive = SpreadsheetApp.getActiveSpreadsheet();
var totalSheets = currentActive.getNumSheets();
var lastSheet = currentActive.getSheets()[totalSheets-1];
var lastSheetName = lastSheet.getName();
var currentSheet = SpreadsheetApp.setActiveSheet(lastSheet);
var ns = SpreadsheetApp.getActiveSpreadsheet().insertSheet(sname);
ns.appendRow(["qid","level","order","weight","reused","path","skill"]);
return true;
}
function getDataFromsheet(sname)
{
    ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sname);
   
    var results = [];
    var col_names = ss.getRange(1,1,1,ss.getLastColumn()).getValues()[0];
     if(ss.getLastRow() == 1){results.push(col_names);return results;};
    ss.getDataRange().offset(1, 0, ss.getLastRow() - 1).getValues().map((r) => {
      console.log(r);
      const map_res = new Map();
      col_names.map((val,index) => {map_res.set(val,r[index]);});
      results.push(Object.fromEntries(map_res));
   }); 
 
  console.log(results);
  return results;

}
function getConfigsName()
{
  var num_sheets = SpreadsheetApp.getActiveSpreadsheet().getNumSheets();
  var sheets = SpreadsheetApp.getActiveSpreadsheet().getSheets();
  results=[]
  sheets.map((s)=> 
  {
    var sname = s.getSheetName();
    if(sname !== 'games-db' && sname !== 'qa-db' && sname !== 'qid-gen')
    {
      results.push(sname);
    }
  
     
  });

  return results;

}

function addGame(data_array){
  data_array = data_array.split(',');
  var ns = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('games-db');
  ns.appendRow(data_array);
  return true;

}
function getAllQuestionsDB()
{
  var ss = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('qa-db');
  var results = [];
  ss.getDataRange().offset(1, 0, ss.getLastRow() - 1).getValues().map((r) => {
      if(r[1] !== ''){
        results.push({'qid':r[0],'question':r[1]});  
      }

   }); 
   return results;
}
function saveAll(config_name,data_array)
{
  data_array = data_array.split(';');
  var qid = parseInt(data_array[0]);
  var config_data = data_array[1].split(',');
  var question = data_array[2];
  var answers = data_array[3].split(',');
  var correct_answer_indexs = data_array[4].split(',');
  var type = data_array[5];
  var fdbk = data_array[6].split(',');
  ss_qa = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('qa-db');
  ss_config = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(config_name);
  var lastRow_config = ss_config.getLastRow();
  var lasCol_config = ss_config.getLastColumn();
  for(var i = 2; i <= lastRow_config; i++)
  {  
   if(ss_config.getRange(i,1).getValue() == qid)
   {
     //console.log(ss_config.getRange(i,2,1,lasCol_config-1).getValues());
     ss_config.getRange(i,2,1,lasCol_config-1).setValues([config_data]);
   }    
  }  
  var lastRow_qa = ss_qa.getLastRow();
  var lasCol_qa= ss_qa.getLastColumn();
  var counter = 0;
  for(var i = 2; i <= lastRow_qa; i++)
  {  
   if(ss_qa.getRange(i,1).getValue() == qid)
   {
   
    let isCorrect = correct_answer_indexs.includes(counter.toString()) ? true : false;
     //console.log(ss_config.getRange(i,2,1,lasCol_config-1).getValues());
     ss_qa.getRange(i,2,1,lasCol_qa-1).setValues([[question,answers[counter],isCorrect,type,fdbk[counter]]]);
     counter == 0 ? question='' : null;
     counter++;
   }    
  }  
  return true;
}
function getDefaultConfig(cid,game_name)
{
  //get course default config spread sheet
  ss_cd = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('course-defconfig');
  var lastRow_cd = ss_cd.getLastRow();
  var lasCol_cd = ss_cd.getLastColumn();
  for(var i = 2; i <= lastRow_cd; i++)
  {  
    
   if(ss_cd.getRange(i,1).getValue() == cid && ss_cd.getRange(i,2).getValue() == game_name )
   {
     return ss_cd.getRange(i,3).getValue();
    //  ss_config.getRange(i,2,1,lasCol_config-1).getValues([config_data]);
   }    
  }
  return "";
}
function setDefaultConfig(data_array)
{
  data_array = data_array.split(';');
  let cid = data_array[0];
  let game_name = data_array[1];
  let config_name = data_array[2];
  //get course default config spread sheet
  ss_cd = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('course-defconfig');
  var lastRow_cd = ss_cd.getLastRow();
  var lasCol_cd = ss_cd.getLastColumn();
  for(var i = 2; i <= lastRow_cd; i++)
  {  

   if(ss_cd.getRange(i,1).getValue() == cid && ss_cd.getRange(i,2).getValue() == game_name )
   {
      ss_cd.getRange(i,3).setValue(config_name);
      return true;
    //  ss_config.getRange(i,2,1,lasCol_config-1).getValues([config_data]);
   }    
  }
  ss_cd.appendRow([cid,game_name,config_name]);
  
}